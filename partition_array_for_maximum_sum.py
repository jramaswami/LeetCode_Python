"""
LeetCode :: 1043. Partition Array for Maximum Sum
jramaswami

Thank You Larry!
"""


from typing import *
import functools
import math


class Solution:


    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:

        @functools.cache
        def solve(i):
            if i >= len(arr):
                return 0

            result = -math.inf
            max_val = -math.inf
            for j in range(k):
                if i + j >= len(arr):
                    break
                max_val = max(max_val, arr[i + j])
                result = max(
                    result,
                    ((j + 1) * max_val) + solve(i + j + 1)
                )
            return result

        return solve(0)



def test_1():
    arr = [1,15,7,9,2,5,10]
    k = 3
    expected = 84
    assert Solution().maxSumAfterPartitioning(arr, k) == expected


def test_2():
    arr = [1,4,1,5,7,3,6,1,9,9,3]
    k = 4
    expected = 83
    assert Solution().maxSumAfterPartitioning(arr, k) == expected


def test_3():
    arr = [1]
    k = 1
    expected = 1
    assert Solution().maxSumAfterPartitioning(arr, k) == expected


def test_4():
    "TLE"
    arr = [902521,929337,135653,25733,499059,9732,665170,43114,624338,380363,940573,877796,333932,501641,77496,273830,198504,462338,45057,341924,972014,786806,624918,546640,766368,651562,165417,556316,492552,827057,296633,694705,246460,954892,897486,572346,126919,836874,791445,805142,469746,603189,552224,947188,316748,261137,269776,867711,435046,576477,354970,733321,384821,443633,777628,782302,195192,477857,660124,611053,63299,352962,725169,222418,876335,943323,711544,8358,669410,160206,538025,142742,522347,614663,419294,997945,661738,75703,276009,570937,433936,870422,625842,45499,638918,131782,781157,128639,582636,333424,847790,28887,401893,758150,934986,349861,316887,879097,176411,682343,1842,214530,145902,106699,616222,34094,513531,289718,471750,349475,427718,18823,681823,842519,420050,248317,842758,759344,556910,210515,977799,899969,958616,951886,228533,547385,65473,536599,289037,539543,86210,552028,740728,654831,63782,847547,150692,599214,335391,630496,566137,942638,505524,336879,491633,796606,358761,956731,104910,339148,296559,257450,858197,888617,699419,281781,708785,637499,862999,467278,768337,474401,232218,796981,917682,426715,345198,437374,436525,112330,907394,838122,706242,100176,822975,445352,208274,223830,128903,347827,819127,659175,555168,887186,528548,526876,418012,772167,198369,465926,283129,630273,819084,451136,332185,336459,790447,430931,338991,366675,346385,99754,130967,779180,676326,943708,377344,147538,97034,290522,721629,897792,623579,925928,675552,66447,623972,619814,772539,777718,13663,112326,251920,750371,180718,134165,109429,205441,66991,598841,385683,285470,519555,590943,474499,811561,944811,343392,302543,851955,721795,485218,447649,246333,227604,132270,108959,702917,595036,799173,970429,163375,921665,121522,191070,217372,979420,611986,473488,22425,707115,834439,682008,727292,688646,440527,726614,855024,430061,311122,526798,67788,257349,690378,461970,855282,288751,819382,152239,174899,163609,654323,422834,809827,21587,430792,303614,798354,286410,726240,124534,331160,676456,989149,692713,631722,604373,506507,204712,899528,624993,45747,781821,509043,381912,640631,465302,36412,41491,32428,794954,821586,783471,334549,344961,959373,900386,6082,560056,349601,339759,685183,769768,139974,836650,423917,16791,70138,65076,942543,345183,729379,954930,927192,685400,312629,169839,248403,322621,174729,587776,698151,508790,245505,183352,45118,224289,710999,353810,437749]
    k = 256
    expected = 348453926
    assert Solution().maxSumAfterPartitioning(arr, k) == expected
