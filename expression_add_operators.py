"""
LeetCode :: September 2021 Challenge :: Expression Add Operators
jramaswami
"""


class Solution:

    def compute(self, index, expression, acc, last_op, numbers, target):
        if index >= len(numbers):
            if acc == target:
                expression_str = "".join(str(x) for x in expression[1:])
                yield expression_str
        else:
            # You can add.
            expression.append("+")
            expression.append(numbers[index])
            acc0 = acc + numbers[index]
            last_op0 = ("+", numbers[index])
            yield from self.compute(index + 1, expression, acc0, last_op0, numbers, target)
            expression.pop()
            expression.pop()

            # You can subtract.
            expression.append("-")
            expression.append(numbers[index])
            acc0 = acc - numbers[index]
            last_op0 = ("-", numbers[index])
            yield from self.compute(index + 1, expression, acc0, last_op0, numbers, target)
            expression.pop()
            expression.pop()

            # You can multiply
            # Undo last operation.
            acc0 = acc
            if last_op[0] == '+':
                acc0 -= last_op[1]
            elif last_op[0] == '-':
                acc0 += last_op[1]
            else:
                acc0 //= last_op[1]
            # Do multication.
            rhs = last_op[1] * numbers[index]
            # Redo last op
            if last_op[0] == '+':
                acc0 += rhs
                last_op0 = ("+", rhs)
            elif last_op[0] == '-':
                acc0 -= rhs
                last_op0 = ("-", rhs)
            else:
                acc0 *= rhs
                last_op0 = ("*", rhs)
            expression.append("*")
            expression.append(numbers[index])
            yield from self.compute(index + 1, expression, acc0, last_op0, numbers, target)
            expression.pop()
            expression.pop()

    def partition(self, index, acc, num_str):
        if index >= len(num_str):
            yield tuple(acc)
        else:
            if len(acc) > 0 and acc[-1] != 0:
                # Add the current digit to the last existing integer in acc.
                p = acc[-1]
                acc[-1] = (acc[-1]) * 10 + int(num_str[index])
                yield from self.partition(index + 1, acc, num_str)
                # Undo.
                acc[-1] = p

            # Add the current digit as new number unless it is zero?
            acc.append(int(num_str[index]))
            yield from self.partition(index + 1, acc, num_str)
            # Undo
            acc.pop()

    def addOperators(self, num_str, target):
        soln = []
        for p in self.partition(0, [], num_str):
            soln.extend(self.compute(1, ["+", p[0]], p[0], ("+", p[0]), p, target))
        return soln



def test_1():
    num_str = "123"
    target = 6
    expected = ["1*2*3", "1+2+3"]
    result = Solution().addOperators(num_str, target)
    assert set(result) == set(expected)


def test_2():
    num_str = "232"
    target = 8
    expected = ["2*3+2","2+3*2"]
    result = Solution().addOperators(num_str, target)
    assert set(result) == set(expected)


def test_3():
    num_str = "105"
    target = 5
    expected = ["1*0+5","10-5"]
    result = Solution().addOperators(num_str, target)
    assert set(result) == set(expected)


def test_4():
    num_str = "00"
    target = 0
    expected = ["0*0","0+0","0-0"]
    result = Solution().addOperators(num_str, target)
    assert set(result) == set(expected)


def test_5():
    num_str = "3456237490"
    target = 9191
    expected = []
    result = Solution().addOperators(num_str, target)
    assert set(result) == set(expected)


def test_6():
    num_str = "1234567890"
    target = 55
    expected = ["1*2*3*4+5*6-7+8+9*0","1*2*3*4+5*6-7+8-9*0","1*2*3*4-56+78+9+0","1*2*3*4-56+78+9-0","1*2*3+4+5*6+7+8+9*0","1*2*3+4+5*6+7+8-9*0","1*2*3+4+5+6-7*8+90","1*2*3+4+5-6*7-8+90","1*2*3+4-5*6-7-8+90","1*2*3+4-5+6*7+8+9*0","1*2*3+4-5+6*7+8-9*0","1*2*3+4-5+67-8-9+0","1*2*3+4-5+67-8-9-0","1*2*3+4-5-6+7*8+9*0","1*2*3+4-5-6+7*8-9*0","1*2*3+45-6-7+8+9+0","1*2*3+45-6-7+8+9-0","1*2*3-4*5-6-7-8+90","1*2*34+5+6-7-8-9+0","1*2*34+5+6-7-8-9-0","1*2*34+5-6+78-90","1*2*34+56-78+9+0","1*2*34+56-78+9-0","1*2+3*4*5-6+7-8+9*0","1*2+3*4*5-6+7-8-9*0","1*2+3*4+56-7-8+9*0","1*2+3*4+56-7-8-9*0","1*2+3+4*5+6+7+8+9+0","1*2+3+4*5+6+7+8+9-0","1*2+3+4*5-6*7+8*9+0","1*2+3+4*5-6*7+8*9-0","1*2+3+4+5+6*7+8-9+0","1*2+3+4+5+6*7+8-9-0","1*2+3+4+5-6+7*8-9+0","1*2+3+4+5-6+7*8-9-0","1*2+3+4+56+7-8-9+0","1*2+3+4+56+7-8-9-0","1*2+3+45+6+7-8+9*0","1*2+3+45+6+7-8-9*0","1*2+3+45-67+8*9+0","1*2+3+45-67+8*9-0","1*2+3-4*5*6*7+890","1*2+3-4+5*6+7+8+9+0","1*2+3-4+5*6+7+8+9-0","1*2+3-4-5+6*7+8+9+0","1*2+3-4-5+6*7+8+9-0","1*2+3-4-5+67-8+9*0","1*2+3-4-5+67-8-9*0","1*2+3-4-5-6+7*8+9+0","1*2+3-4-5-6+7*8+9-0","1*2+3-4-5-6-7+8*9+0","1*2+3-4-5-6-7+8*9-0","1*2+3-45+6+7-8+90","1*2+34+5+6+7-8+9+0","1*2+34+5+6+7-8+9-0","1*2+34-56-7-8+90","1*2-3+4*56-78-90","1*2-3+4+5-6*7+89+0","1*2-3+4+5-6*7+89-0","1*2-3+4-5*6-7+89+0","1*2-3+4-5*6-7+89-0","1*2-3-4*5-6-7+89+0","1*2-3-4*5-6-7+89-0","1*23*4+5-6*7+8*9*0","1*23*4+5-6*7+89*0","1*23*4+5-6*7-8*9*0","1*23*4+5-6*7-89*0","1*23*4-5*6-7+8*9*0","1*23*4-5*6-7+89*0","1*23*4-5*6-7-8*9*0","1*23*4-5*6-7-89*0","1*23+4*5+6+7+8-9+0","1*23+4*5+6+7+8-9-0","1*23+45-6-7+8*9*0","1*23+45-6-7+89*0","1*23+45-6-7-8*9*0","1*23+45-6-7-89*0","1*23-4+5*6+7+8-9+0","1*23-4+5*6+7+8-9-0","1*23-4+5-67+8+90","1*23-4-5+6*7+8-9+0","1*23-4-5+6*7+8-9-0","1*23-4-5-6+7*8-9+0","1*23-4-5-6+7*8-9-0","1*234-5-6-78-90","1+2*3*4*5-67-8+9+0","1+2*3*4*5-67-8+9-0","1+2*3*4+5*6+7*8*9*0","1+2*3*4+5*6+7*89*0","1+2*3*4+5*6+78*9*0","1+2*3*4+5*6+789*0","1+2*3*4+5*6-7*8*9*0","1+2*3*4+5*6-7*89*0","1+2*3*4+5*6-78*9*0","1+2*3*4+5*6-789*0","1+2*3*4+5+6*7-8-9+0","1+2*3*4+5+6*7-8-9-0","1+2*3+4*5-6-7*8+90","1+2*3+4+56+78-90","1+2*3-4*5*6+78+90","1+2*3-4*5+67-8+9+0","1+2*3-4*5+67-8+9-0","1+2*3-4+5-6*7+89+0","1+2*3-4+5-6*7+89-0","1+2*3-4-5*6-7+89+0","1+2*3-4-5*6-7+89-0","1+2*3-45+6+78+9+0","1+2*3-45+6+78+9-0","1+2*3-456+7*8*9+0","1+2*3-456+7*8*9-0","1+2*34-5+6-7-8+9*0","1+2*34-5+6-7-8-9*0","1+2+3*4+5*6-7+8+9+0","1+2+3*4+5*6-7+8+9-0","1+2+3*4-56+7+89+0","1+2+3*4-56+7+89-0","1+2+3*45+6-7+8-90","1+2+3+4+5*6+7+8+9*0","1+2+3+4+5*6+7+8-9*0","1+2+3+4+5+6-7*8+90","1+2+3+4+5-6*7-8+90","1+2+3+4-5*6-7-8+90","1+2+3+4-5+6*7+8+9*0","1+2+3+4-5+6*7+8-9*0","1+2+3+4-5+67-8-9+0","1+2+3+4-5+67-8-9-0","1+2+3+4-5-6+7*8+9*0","1+2+3+4-5-6+7*8-9*0","1+2+3+45-6-7+8+9+0","1+2+3+45-6-7+8+9-0","1+2+3-4*5-6-7-8+90","1+2+34+5*6+78-90","1+2+34+5+6+7+8*9*0","1+2+34+5+6+7+89*0","1+2+34+5+6+7-8*9*0","1+2+34+5+6+7-89*0","1+2-3*4+5*6-7*8+90","1+2-3*4+5+6*7+8+9+0","1+2-3*4+5+6*7+8+9-0","1+2-3*4+5+67-8+9*0","1+2-3*4+5+67-8-9*0","1+2-3*4+5-6+7*8+9+0","1+2-3*4+5-6+7*8+9-0","1+2-3*4+5-6-7+8*9+0","1+2-3*4+5-6-7+8*9-0","1+2-3*4+56+7-8+9+0","1+2-3*4+56+7-8+9-0","1+2-3*4-5-6-7-8+90","1+2-3+4*5*6+7-8*9+0","1+2-3+4*5*6+7-8*9-0","1+2-3+4*5*6-7*8-9+0","1+2-3+4*5*6-7*8-9-0","1+2-3+4-5-6*7+8+90","1+2-3-4*5+6+78-9+0","1+2-3-4*5+6+78-9-0","1+2-3-4*5+67+8+9*0","1+2-3-4*5+67+8-9*0","1+2-3-4-5*6+7-8+90","1+2-34+5*6+7*8+9*0","1+2-34+5*6+7*8-9*0","1+2-34+5+6-7-8+90","1+2-34+5-6+78+9+0","1+2-34+5-6+78+9-0","1+23*4+5-6*7+8-9+0","1+23*4+5-6*7+8-9-0","1+23*4-5*6-7+8-9+0","1+23*4-5*6-7+8-9-0","1+23+4*5*6-7+8-90","1+23+4+5-67+89+0","1+23+4+5-67+89-0","1+23+45-6-7+8-9+0","1+23+45-6-7+8-9-0","1+23-4+5+6+7+8+9+0","1+23-4+5+6+7+8+9-0","1+23-4+5-6*7+8*9+0","1+23-4+5-6*7+8*9-0","1+23-4-5*6+7*8+9+0","1+23-4-5*6+7*8+9-0","1+23-4-5*6-7+8*9+0","1+23-4-5*6-7+8*9-0","1+23-4-5+6-7*8+90","1+23-4-5-6*7-8+90","1+23-4-56-7+8+90","1+23-45-6-7+89+0","1+23-45-6-7+89-0","1-2*3*4*5+6+78+90","1-2*3*4+5-6+7+8*9+0","1-2*3*4+5-6+7+8*9-0","1-2*3*4-5-6+7-8+90","1-2*3+4*5+6-7*8+90","1-2*3+4*5-6*7-8+90","1-2*3+4+56+7*8*9*0","1-2*3+4+56+7*89*0","1-2*3+4+56+78*9*0","1-2*3+4+56+789*0","1-2*3+4+56-7*8*9*0","1-2*3+4+56-7*89*0","1-2*3+4+56-78*9*0","1-2*3+4+56-789*0","1-2*3+45-67-8+90","1-2*3-4+5*6-7*8+90","1-2*3-4+5+6*7+8+9+0","1-2*3-4+5+6*7+8+9-0","1-2*3-4+5+67-8+9*0","1-2*3-4+5+67-8-9*0","1-2*3-4+5-6+7*8+9+0","1-2*3-4+5-6+7*8+9-0","1-2*3-4+5-6-7+8*9+0","1-2*3-4+5-6-7+8*9-0","1-2*3-4+56+7-8+9+0","1-2*3-4+56+7-8+9-0","1-2*3-4-5-6-7-8+90","1-2+3*4*5+6+7-8-9+0","1-2+3*4*5+6+7-8-9-0","1-2+3*4+56+78-90","1-2+3+4+56-7+8*9*0","1-2+3+4+56-7+89*0","1-2+3+4+56-7-8*9*0","1-2+3+4+56-7-89*0","1-2+3+4-5*6+7+8*9+0","1-2+3+4-5*6+7+8*9-0","1-2+3+4-56+7+8+90","1-2+3-4*5-6+7+8*9+0","1-2+3-4*5-6+7+8*9-0","1-2+3-4+56-7+8+9*0","1-2+3-4+56-7+8-9*0","1-2+3-4-5*6+78+9+0","1-2+3-4-5*6+78+9-0","1-2+3-4-5+6+7*8+9*0","1-2+3-4-5+6+7*8-9*0","1-2+34*5-6*7-8*9+0","1-2+34*5-6*7-8*9-0","1-2+34+5*6-7+8-9+0","1-2+34+5*6-7+8-9-0","1-2+34+56+7*8-90","1-2+34-56+78+9*0","1-2+34-56+78-9*0","1-2-3*4+5-6+78-9+0","1-2-3*4+5-6+78-9-0","1-2-3*4+56-78+90","1-2-3*4-5-6+7+8*9+0","1-2-3*4-5-6+7+8*9-0","1-2-3+4+5+6*7+8+9*0","1-2-3+4+5+6*7+8-9*0","1-2-3+4+5+67-8-9+0","1-2-3+4+5+67-8-9-0","1-2-3+4+5-6+7*8+9*0","1-2-3+4+5-6+7*8-9*0","1-2-3+4+56+7-8+9*0","1-2-3+4+56+7-8-9*0","1-2-3+45+6+7-8+9+0","1-2-3+45+6+7-8+9-0","1-2-3-4+56+7+8*9*0","1-2-3-4+56+7+89*0","1-2-3-4+56+7-8*9*0","1-2-3-4+56+7-89*0","1-2-3-4-5+67-8+9+0","1-2-3-4-5+67-8+9-0","1-2-34+5+6+7+8*9+0","1-2-34+5+6+7+8*9-0","1-2-34+5-6-7+8+90","1-2-34+56-7*8+90","1-2-34-5+6+7-8+90","1-2-34-56+7*8+90","1-23+4+5+67-8+9+0","1-23+4+5+67-8+9-0","1-23-4*5+6-7+8+90","1-23-4+5-6-7+89+0","1-23-4+5-6-7+89-0","12*3*4-5-6-78+9*0","12*3*4-5-6-78-9*0","12*3*4-5-67-8-9+0","12*3*4-5-67-8-9-0","12*3+4*5+6-7+8*9*0","12*3+4*5+6-7+89*0","12*3+4*5+6-7-8*9*0","12*3+4*5+6-7-89*0","12*3+4+5*6-7-8+9*0","12*3+4+5*6-7-8-9*0","12*3-4+5*6-7+8*9*0","12*3-4+5*6-7+89*0","12*3-4+5*6-7-8*9*0","12*3-4+5*6-7-89*0","12*3-4+5+6-78+90","12*3-4+5-6+7+8+9+0","12*3-4+5-6+7+8+9-0","12*3-4-5-6-7*8+90","12*3-4-56+7+8*9+0","12*3-4-56+7+8*9-0","12+3*4+5*6-7+8+9*0","12+3*4+5*6-7+8-9*0","12+3*4-56+78+9+0","12+3*4-56+78+9-0","12+3+4+5*6+7+8-9+0","12+3+4+5*6+7+8-9-0","12+3+4+5-67+8+90","12+3+4-5+6*7+8-9+0","12+3+4-5+6*7+8-9-0","12+3+4-5-6+7*8-9+0","12+3+4-5-6+7*8-9-0","12+3+45+67-8*9+0","12+3+45+67-8*9-0","12+3+45-6-7+8+9*0","12+3+45-6-7+8-9*0","12+3-4+56+78-90","12+3-45+6+7+8*9+0","12+3-45+6+7+8*9-0","12+3-45-6-7+8+90","12+34+5-6-7+8+9+0","12+34+5-6-7+8+9-0","12+34+56-7*8+9+0","12+34+56-7*8+9-0","12+34-5+6+7-8+9+0","12+34-5+6+7-8+9-0","12+34-56+7*8+9+0","12+34-56+7*8+9-0","12+34-56-7+8*9+0","12+34-56-7+8*9-0","12-3*4+5+6*7+8+9*0","12-3*4+5+6*7+8-9*0","12-3*4+5+67-8-9+0","12-3*4+5+67-8-9-0","12-3*4+5-6+7*8+9*0","12-3*4+5-6+7*8-9*0","12-3*4+56+7-8+9*0","12-3*4+56+7-8-9*0","12-3+4+5*6-78+90","12-3+4-5-6*7+89+0","12-3+4-5-6*7+89-0","12-3+45-6+7+8*9*0","12-3+45-6+7+89*0","12-3+45-6+7-8*9*0","12-3+45-6+7-89*0","12-3-4*5+67+8-9+0","12-3-4*5+67+8-9-0","12-3-4+56-7-8+9+0","12-3-4+56-7-8+9-0","12-34+5*6+7*8-9+0","12-34+5*6+7*8-9-0","12-34+5-6+78+9*0","12-34+5-6+78-9*0","123+4*5-6+7-89+0","123+4*5-6+7-89-0","123+4-5-67+8*9*0","123+4-5-67+89*0","123+4-5-67-8*9*0","123+4-5-67-89*0","123-4+5+6+7+8-90","123-4-5*6+7*8-90","123-4-5+6+7-8*9+0","123-4-5+6+7-8*9-0","123-4-5+6-7*8-9+0","123-4-5+6-7*8-9-0","123-4-5-6*7-8-9+0","123-4-5-6*7-8-9-0","123-4-5-67+8+9*0","123-4-5-67+8-9*0","123-4-56-7+8-9+0","123-4-56-7+8-9-0"]
    result = Solution().addOperators(num_str, target)
    assert set(result) == set(expected)
